# -*- coding: utf-8 -*-
"""CSVtoXML_Model8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15j_RBX_26zbTegBg-NyzzbAfVArEN6ni
"""

#mounting the google drive to colabs
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

#import the required libraries
import os
import pandas as pd #Data manipulation
import numpy as np #Data manipulation
import cv2 # For image size information

#Load the required dataset to provide to the model
df = pd.read_csv ('/content/drive/MyDrive/DAEN690/Iteration203_Model8/Model8.csv')
print(df)

#the target folder is annotations file of the dataset
target_folder = '/content/drive/MyDrive/DAEN690/Iteration203_Model8/annotations'

# the image_src contains the total 15000 images 
image_src = '/content/drive/MyDrive/DAEN690/jpg_images_15000'

#checking and printing the subfolders present in the directory Iteration203_Model8
!ls '/content/drive/MyDrive/DAEN690/Iteration203_Model8'

#checking for a particular image_id in the dataset and retrieve them
df.loc[df['image_id'] == '000d68e42b71d3eac10ccc077aba07c1']

#df.drop('class_name_old', axis=1, inplace=True)
#df.drop('class_id_old', axis=1, inplace=True)
#df.drop('rad_id', axis=1, inplace=True)

#remove duplicate values
unique_df = df.drop_duplicates()
#remove the nan values and replace them
unique_df = unique_df.replace(np.nan, '', regex=True)

#create an other dataframe "df2" with image_id and class name 

df2 = unique_df.sort_values(by=['image_id','class_name'],ignore_index=True)

#add x_min, y_min, x_max and y_max colummns to the dataframe, replace nulls with zeros
df2['x_min'] = df2['x_min'].replace('', 0)
df2['y_min'] = df2['y_min'].replace('', 0)
df2['x_max'] = df2['x_max'].replace('', 0)
df2['y_max'] = df2['y_max'].replace('', 0)

#arr_images = df2['image_id'].unique()

#create an other dataframe with unique values, then sort them according to image_id and reset the index
df_images = pd.DataFrame(df2['image_id'].unique(), columns = ['image_id'])

df_images.sort_values(by=['image_id'], inplace=True)
df_images.reset_index(drop=True, inplace=True)

#take the image_id and filter it with that
nxtImage = '000ae00eb3942d27e0b97903dd563a6e'
nxtdf = df2.loc[df2['image_id'] == '000ae00eb3942d27e0b97903dd563a6e']
nxtdf

#define the function that will put together the XML given class_name, x_min, y_min, x_max, y_max

def GetRowXMl(class_name, x_min, y_min, x_max, y_max):

  obj_xml = '<object> \n <name>{0}</name><pose>Frontal</pose><truncated>0</truncated><occluded>0</occluded><bndbox><xmin>{1}</xmin><ymin>{2}</ymin><xmax>{3}</xmax><ymax>{4}</ymax></bndbox><difficult>0</difficult></object>'.format(class_name, int(x_min),int(y_min),int(x_max), int(y_max))

  return obj_xml

# This is for testing the logic of GetRowXML only
from numpy import NaN
#GetRowXMl('lung_opacityc', 900, 587, 1205, 888)

#create the xml object 
GetRowXMl('lung_opacity', 0, 0, 0, 0)

#provide the datset with the list of all the images
df_images = pd.read_csv ('/content/drive/MyDrive/DAEN690/Iteration203_Model8/Model8imagelist.csv')

df_images.columns = ['image_id']
df_images

#iterate through all the rows from df_images dataframe to get the image ids
for index, row in df_images.iterrows():
    #print(row['image_id'])
    nxtImage = row['image_id']
    nxtdf = df2.loc[df2['image_id'] == nxtImage]

    if (index%1000 == 0):
      print(index)

    #if (row['image_id'] not in (df_images)):
    #  continue

    nxtdf.reset_index(drop=True, inplace=True)

    #print(nxtImage)

    #continue
    
    #print(nxtdf)
    nxtObj = ''

    #read the image using open cv
    im = cv2.imread(image_src + '/' + nxtImage + '.jpg')

    img_ht, img_wd, img_cl = im.shape
    #print(img_ht, img_wd, img_cl)
    #continue

    #Begin with the header image content

    xml1 = '<annotation><folder>annotations</folder><filename>{0}.jpg</filename>'.format(nxtImage)
    xml2 = '<source><database>Chest XRay Dataset</database><annotation>3</annotation><image>"{0}"</image>'.format(nxtImage)
    xml3 = '</source><size><width>{1}</width><height>{0}</height><depth>{2}</depth></size><segmented>0</segmented>'.format(img_ht, img_wd, img_cl)
    xml4 = ''

    #Now add every Rectangular region and the condition
    for i in range(len(nxtdf)):
      xml4 = xml4 + GetRowXMl(nxtdf.iloc[i, 1], nxtdf.iloc[i, 3], nxtdf.iloc[i, 4], nxtdf.iloc[i, 5], nxtdf.iloc[i, 6])
    #xml4 = GetRowXMl('lung_opacityc', 900, 587, 1205, 888)
    xml5 = '</annotation>'

    xml = xml1 + xml2 + xml3 + xml4 + xml5
 
    #write this XML annotation as its own file 
    text_file = open(target_folder + '/' + nxtImage + '.xml', "w")
    n = text_file.write(xml)
    text_file.close()
